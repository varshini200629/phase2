# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G6tQFFoYUxz9DXYclRDSmhHlzuvVIII6
"""

import pandas as pd

def load_data(filepath):
    return pd.read_csv(filepath)
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

def preprocess_data(df, target_column):
    X = df.drop(columns=[target_column])
    y = df[target_column]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    return X_train_scaled, X_test_scaled, y_train, y_test
from sklearn.ensemble import RandomForestRegressor

def train_model(X_train, y_train):
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model
from sklearn.metrics import mean_squared_error, r2_score

def evaluate_model(model, X_test, y_test):
    predictions = model.predict(X_test)
    mse = mean_squared_error(y_test, predictions)
    r2 = r2_score(y_test, predictions)
    return mse, r2
import matplotlib.pyplot as plt

def plot_predictions(y_test, predictions):
    plt.figure(figsize=(10, 6))
    plt.plot(y_test.values, label='Actual')
    plt.plot(predictions, label='Predicted')
    plt.legend()
    plt.title('Actual vs Predicted Air Quality')
    plt.xlabel('Samples')
    plt.ylabel('Air Quality Index')
    plt.show()
from src.data_loader import load_data
from src.preprocessing import preprocess_data
from src.model import train_model
from src.evaluation import evaluate_model
from src.visualization import plot_predictions

def main():
    df = load_data('data/air_quality.csv')
    X_train, X_test, y_train, y_test = preprocess_data(df, target_column='AQI')
    model = train_model(X_train, y_train)
    mse, r2 = evaluate_model(model, X_test, y_test)

    print(f'Mean Squared Error: {mse:.2f}')
    print(f'R^2 Score: {r2:.2f}')

    predictions = model.predict(X_test)
    plot_predictions(y_test, predictions)

if __name__ == '__main__':
    main()